<<<<<<< HEAD
// @flow strict
=======
// @flow
>>>>>>> babce7e82dc134320378dfce834b316b88320254
import * as React from 'react';
import warning from 'warning';
import { ManagerReferenceNodeSetterContext } from './Manager';
import { safeInvoke, unwrapArray, setRef } from './utils';
<<<<<<< HEAD
import { type Ref } from './RefTypes';

export type ReferenceChildrenProps = $ReadOnly<{ ref: Ref }>;
export type ReferenceProps = $ReadOnly<{|
  children: (ReferenceChildrenProps) => React.Node,
  innerRef?: Ref,
|}>;

export function Reference({ children, innerRef }: ReferenceProps): React.Node {
  const setReferenceNode = React.useContext(ManagerReferenceNodeSetterContext);

  const refHandler = React.useCallback(
    (node: ?HTMLElement) => {
      setRef(innerRef, node);
      safeInvoke(setReferenceNode, node);
    },
    [innerRef, setReferenceNode]
  );

  // ran on unmount
  // eslint-disable-next-line react-hooks/exhaustive-deps
  React.useEffect(() => () => setRef(innerRef, null), []);

  React.useEffect(() => {
    warning(
      Boolean(setReferenceNode),
      '`Reference` should not be used outside of a `Manager` component.'
    );
  }, [setReferenceNode]);

  return unwrapArray(children)({ ref: refHandler });
=======
import { type Ref } from "./RefTypes";

export type ReferenceChildrenProps = { ref: Ref };
export type ReferenceProps = {
  children: ReferenceChildrenProps => React.Node,
  innerRef?: Ref,
};

type InnerReferenceProps = {
  setReferenceNode?: (?HTMLElement) => void,
};

class InnerReference extends React.Component<
  ReferenceProps & InnerReferenceProps
> {
  refHandler = (node: ?HTMLElement) => {
    setRef(this.props.innerRef, node)
    safeInvoke(this.props.setReferenceNode, node);
  };

  componentWillUnmount() {
    setRef(this.props.innerRef, null)
  }

  render() {
    warning(
      Boolean(this.props.setReferenceNode),
      '`Reference` should not be used outside of a `Manager` component.'
    );
    return unwrapArray(this.props.children)({ ref: this.refHandler });
  }
}

export default function Reference(props: ReferenceProps) {
  return (
    <ManagerReferenceNodeSetterContext.Consumer>
      {(setReferenceNode) => (
        <InnerReference setReferenceNode={setReferenceNode} {...props} />
      )}
    </ManagerReferenceNodeSetterContext.Consumer>
  );
>>>>>>> babce7e82dc134320378dfce834b316b88320254
}
