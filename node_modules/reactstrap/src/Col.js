import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { mapToCssModules, tagPropType, isObject } from './utils';

<<<<<<< HEAD
const colWidths = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];
const stringOrNumberProp = PropTypes.oneOfType([
  PropTypes.number,
  PropTypes.string,
]);
=======
const colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];
const stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);
>>>>>>> babce7e82dc134320378dfce834b316b88320254

const columnProps = PropTypes.oneOfType([
  PropTypes.bool,
  PropTypes.number,
  PropTypes.string,
  PropTypes.shape({
<<<<<<< HEAD
    size: PropTypes.oneOfType([
      PropTypes.bool,
      PropTypes.number,
      PropTypes.string,
    ]),
    order: stringOrNumberProp,
    offset: stringOrNumberProp,
  }),
=======
    size: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),
    order: stringOrNumberProp,
    offset: stringOrNumberProp
  })
>>>>>>> babce7e82dc134320378dfce834b316b88320254
]);

const propTypes = {
  tag: tagPropType,
  xs: columnProps,
  sm: columnProps,
  md: columnProps,
  lg: columnProps,
  xl: columnProps,
<<<<<<< HEAD
  xxl: columnProps,
=======
>>>>>>> babce7e82dc134320378dfce834b316b88320254
  className: PropTypes.string,
  cssModule: PropTypes.object,
  widths: PropTypes.array,
};

<<<<<<< HEAD
const getColumnSizeClass = (isXs, colWidth, colSize) => {
  if (colSize === true || colSize === '') {
    return isXs ? 'col' : `col-${colWidth}`;
  }
  if (colSize === 'auto') {
=======
const defaultProps = {
  tag: 'div',
  widths: colWidths,
};

const getColumnSizeClass = (isXs, colWidth, colSize) => {
  if (colSize === true || colSize === '') {
    return isXs ? 'col' : `col-${colWidth}`;
  } else if (colSize === 'auto') {
>>>>>>> babce7e82dc134320378dfce834b316b88320254
    return isXs ? 'col-auto' : `col-${colWidth}-auto`;
  }

  return isXs ? `col-${colSize}` : `col-${colWidth}-${colSize}`;
};

<<<<<<< HEAD
export const getColumnClasses = (attributes, cssModule, widths = colWidths) => {
  const modifiedAttributes = attributes;
  const colClasses = [];

  widths.forEach((colWidth, i) => {
    let columnProp = modifiedAttributes[colWidth];

    delete modifiedAttributes[colWidth];
=======
const Col = (props) => {
  const {
    className,
    cssModule,
    widths,
    tag: Tag,
    ...attributes
  } = props;
  const colClasses = [];

  widths.forEach((colWidth, i) => {
    let columnProp = props[colWidth];

    delete attributes[colWidth];
>>>>>>> babce7e82dc134320378dfce834b316b88320254

    if (!columnProp && columnProp !== '') {
      return;
    }

    const isXs = !i;

    if (isObject(columnProp)) {
      const colSizeInterfix = isXs ? '-' : `-${colWidth}-`;
      const colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);

<<<<<<< HEAD
      colClasses.push(
        mapToCssModules(
          classNames({
            [colClass]: columnProp.size || columnProp.size === '',
            [`order${colSizeInterfix}${columnProp.order}`]:
              columnProp.order || columnProp.order === 0,
            [`offset${colSizeInterfix}${columnProp.offset}`]:
              columnProp.offset || columnProp.offset === 0,
          }),
          cssModule,
        ),
      );
=======
      colClasses.push(mapToCssModules(classNames({
        [colClass]: columnProp.size || columnProp.size === '',
        [`order${colSizeInterfix}${columnProp.order}`]: columnProp.order || columnProp.order === 0,
        [`offset${colSizeInterfix}${columnProp.offset}`]: columnProp.offset || columnProp.offset === 0
      }), cssModule));
>>>>>>> babce7e82dc134320378dfce834b316b88320254
    } else {
      const colClass = getColumnSizeClass(isXs, colWidth, columnProp);
      colClasses.push(colClass);
    }
  });

<<<<<<< HEAD
  return {
    colClasses,
    modifiedAttributes,
  };
};

function Col(props) {
  const {
    className,
    cssModule,
    widths = colWidths,
    tag: Tag = 'div',
    ...attributes
  } = props;

  let { modifiedAttributes, colClasses } = getColumnClasses(
    attributes,
    cssModule,
    widths,
  );

=======
>>>>>>> babce7e82dc134320378dfce834b316b88320254
  if (!colClasses.length) {
    colClasses.push('col');
  }

<<<<<<< HEAD
  const classes = mapToCssModules(classNames(className, colClasses), cssModule);

  return <Tag {...modifiedAttributes} className={classes} />;
}

Col.propTypes = propTypes;
=======
  const classes = mapToCssModules(classNames(
    className,
    colClasses
  ), cssModule);

  return (
    <Tag {...attributes} className={classes} />
  );
};

Col.propTypes = propTypes;
Col.defaultProps = defaultProps;
>>>>>>> babce7e82dc134320378dfce834b316b88320254

export default Col;
