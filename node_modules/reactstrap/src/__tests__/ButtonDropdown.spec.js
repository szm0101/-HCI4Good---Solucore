import React from 'react';
<<<<<<< HEAD
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from '..';
=======
import { mount } from 'enzyme';
import { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from '../';

>>>>>>> babce7e82dc134320378dfce834b316b88320254

describe('ButtonDropdown', () => {
  let isOpen;
  let toggle;

  beforeEach(() => {
<<<<<<< HEAD
    toggle = () => {};
  });

  it('should render a single child', () => {
    render(
      <ButtonDropdown isOpen toggle={toggle}>
        Ello world
      </ButtonDropdown>,
    );

    expect(screen.getByText('Ello world')).toBeInTheDocument();
=======
    isOpen = false;
    toggle = () => { isOpen = !isOpen; };
  });

  it('should render a single child', () => {
    const wrapper = mount(<ButtonDropdown isOpen={isOpen} toggle={toggle}>Ello world</ButtonDropdown>);

    expect(wrapper.find('.btn-group').hostNodes().text()).toBe('Ello world');
    expect(wrapper.find('.btn-group').hostNodes().length).toBe(1);
>>>>>>> babce7e82dc134320378dfce834b316b88320254
  });

  it('should render multiple children when isOpen', () => {
    isOpen = true;
<<<<<<< HEAD
    render(
      <ButtonDropdown isOpen toggle={toggle}>
=======
    const wrapper = mount(
      <ButtonDropdown isOpen={isOpen} toggle={toggle}>
>>>>>>> babce7e82dc134320378dfce834b316b88320254
        <DropdownToggle>Toggle</DropdownToggle>
        <DropdownMenu>
          <DropdownItem>Test</DropdownItem>
        </DropdownMenu>
<<<<<<< HEAD
      </ButtonDropdown>,
    );

    expect(screen.getByText(/toggle/i)).toBeInTheDocument();
    expect(screen.getByText(/test/i)).toBeInTheDocument();
=======
      </ButtonDropdown>
    );

    expect(wrapper.find('.btn').hostNodes().text()).toBe('Toggle');
    expect(wrapper.find('.btn-group').hostNodes().length).toBe(1);
    expect(wrapper.find('.dropdown-item').hostNodes().length).toBe(1);
    expect(wrapper.childAt(0).childAt(0).childAt(0).children().length).toBe(2);
>>>>>>> babce7e82dc134320378dfce834b316b88320254
  });
});
