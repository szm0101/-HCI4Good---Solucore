import React, { Component } from 'react';
import PropTypes from 'prop-types';
<<<<<<< HEAD
=======
import classNames from 'classnames';
>>>>>>> babce7e82dc134320378dfce834b316b88320254
import { mapToCssModules, tagPropType } from './utils';

const propTypes = {
  children: PropTypes.node,
<<<<<<< HEAD
  tag: tagPropType,
  innerRef: PropTypes.oneOfType([
    PropTypes.object,
    PropTypes.func,
    PropTypes.string,
  ]),
=======
  inline: PropTypes.bool,
  tag: tagPropType,
  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),
>>>>>>> babce7e82dc134320378dfce834b316b88320254
  className: PropTypes.string,
  cssModule: PropTypes.object,
};

<<<<<<< HEAD
=======
const defaultProps = {
  tag: 'form',
};
>>>>>>> babce7e82dc134320378dfce834b316b88320254
class Form extends Component {
  constructor(props) {
    super(props);
    this.getRef = this.getRef.bind(this);
    this.submit = this.submit.bind(this);
  }

  getRef(ref) {
    if (this.props.innerRef) {
      this.props.innerRef(ref);
    }
    this.ref = ref;
  }

  submit() {
    if (this.ref) {
      this.ref.submit();
    }
  }

  render() {
    const {
      className,
      cssModule,
<<<<<<< HEAD
      tag: Tag = 'form',
=======
      inline,
      tag: Tag,
>>>>>>> babce7e82dc134320378dfce834b316b88320254
      innerRef,
      ...attributes
    } = this.props;

<<<<<<< HEAD
    const classes = mapToCssModules(className, cssModule);
    return <Tag {...attributes} ref={innerRef} className={classes} />;
=======
    const classes = mapToCssModules(classNames(
      className,
      inline ? 'form-inline' : false
    ), cssModule);

    return (
      <Tag {...attributes} ref={innerRef} className={classes} />
    );
>>>>>>> babce7e82dc134320378dfce834b316b88320254
  }
}

Form.propTypes = propTypes;
<<<<<<< HEAD
=======
Form.defaultProps = defaultProps;
>>>>>>> babce7e82dc134320378dfce834b316b88320254

export default Form;
